<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Shoten</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- SweetAlert2 CDN -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        body {
            background: black;
        }
        @keyframes glitch {
            0% { text-shadow: 2px 2px #ff0000, -2px -2px #00ffff; }
            25% { text-shadow: -2px -2px #ff0000, 2px 2px #00ffff; }
            50% { text-shadow: 2px -2px #ff0000, -2px 2px #00ffff; }
            75% { text-shadow: -2px 2px #ff0000, 2px -2px #00ffff; }
            100% { text-shadow: 2px 2px #ff0000, -2px -2px #00ffff; }
        }
        .animate-glitch {
            font-size: 8rem;
            font-weight: bold;
            color: #00ffff;
            animation: glitch 0.2s infinite;
        }
        .error-message {
            color: red;
            font-size: 0.75rem;
            display: none;
            margin: 0px !important;
        }
        /* Loader Styling */
        .loader-container {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.85);
            z-index: 10000 !important;
            justify-content: center;
            align-items: center;
            flex-direction: column;
        }
        /* Enhanced Cyber ring animation */
        .cyber-ring {
            position: relative;
            width: 250px;
            height: 250px;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .ring {
            position: absolute;
            border-radius: 50%;
            border: 4px solid transparent;
            mix-blend-mode: screen;
            filter: drop-shadow(0 0 10px currentColor);
        }
        .ring:nth-child(1) {
            width: 180px;
            height: 180px;
            border-top: 4px solid #00ffff;
            border-bottom: 4px solid #00ffff;
            animation: spin 2s linear infinite, pulse-ring 3s ease-in-out infinite;
        }
        .ring:nth-child(2) {
            width: 220px;
            height: 220px;
            border-left: 4px solid #ff0066;
            border-right: 4px solid #ff0066;
            animation: spin 2.5s linear infinite reverse, pulse-ring 3s ease-in-out infinite 0.5s;
        }
        .ring:nth-child(3) {
            width: 140px;
            height: 140px;
            border-top: 4px solid #ffcc00;
            border-left: 4px solid #ffcc00;
            animation: spin 1.5s linear infinite, pulse-ring 3s ease-in-out infinite 1s;
        }
        .ring:nth-child(4) {
            width: 100px;
            height: 100px;
            border: 4px solid #00ff88;
            animation: spin 3s linear infinite reverse, pulse-ring 3s ease-in-out infinite 1.5s;
        }
        .ring:nth-child(5) {
            width: 260px;
            height: 260px;
            border-right: 4px solid #8800ff;
            border-bottom: 4px solid #8800ff;
            animation: spin 4s linear infinite, pulse-ring 3s ease-in-out infinite 2s;
        }
        /* Progress text */
        .progress-text {
            position: absolute;
            font-family: monospace;
            font-size: 1.5rem;
            color: #00ffff;
            text-shadow: 0 0 5px #00ffff;
        }
        /* Loading percentage counter */
        .percentage-container {
            margin-top: 30px;
            font-family: monospace;
            font-size: 1.2rem;
            letter-spacing: 2px;
            color: #00ffff;
        }
        /* Fun status messages */
        .status-message {
            margin-top: 30px;
            font-family: monospace;
            font-size: 1rem;
            color: white;
            max-width: 300px;
            text-align: center;
            min-height: 2.5rem;
        }
        /* Glitchy binary background */
        .binary-bg {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            overflow: hidden;
            opacity: 0.1;
            z-index: -1;
            color: #00ffff;
            font-family: monospace;
            font-size: 14px;
            pointer-events: none;
        }
        /* Enhanced Animations */
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        @keyframes pulse-ring {
            0%, 100% {
                transform: scale(1);
                opacity: 1;
            }
            50% {
                transform: scale(1.1);
                opacity: 0.7;
            }
        }
        @keyframes glow {
            0%, 100% { text-shadow: 0 0 5px #00ffff; }
            50% { text-shadow: 0 0 20px #00ffff, 0 0 30px #00ffff, 0 0 40px #00ffff; }
        }
        @keyframes matrix-rain {
            0% { transform: translateY(-100vh); opacity: 1; }
            100% { transform: translateY(100vh); opacity: 0; }
        }
        @keyframes hologram-flicker {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.8; }
            75% { opacity: 0.9; }
        }
        @keyframes data-stream {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100vw); }
        }
        .glow-text {
            animation: glow 1.5s ease-in-out infinite;
        }
        .hologram-effect {
            animation: hologram-flicker 0.1s infinite;
        }
        /* Particle effects */
        .particle {
            position: absolute;
            width: 2px;
            height: 2px;
            background: #00ffff;
            border-radius: 50%;
            animation: matrix-rain 3s linear infinite;
        }
        .data-stream {
            position: absolute;
            height: 1px;
            background: linear-gradient(90deg, transparent, #00ffff, transparent);
            animation: data-stream 2s linear infinite;
        }
        .loader-container.active {
            display: flex !important;
        }
        /* Welcome Animation Styling */
        .welcome-container {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: black;
            z-index: 20000 !important;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            overflow: hidden;
        }
        .welcome-text {
            font-family: monospace;
            font-size: 4rem;
            font-weight: bold;
            color: #00ffff;
            text-shadow: 0 0 10px #00ffff, 0 0 20px #00ffff;
            animation: fadeInOut 3s ease-in-out forwards;
        }
        @keyframes fadeInOut {
            0% { opacity: 0; transform: scale(0.8); }
            50% { opacity: 1; transform: scale(1); }
            100% { opacity: 0; transform: scale(1.2); }
        }
        .welcome-container.active {
            display: flex !important;
        }
    </style>
</head>
<body class="flex justify-center items-center h-screen text-white relative">
    <!-- Enhanced Animated Loader -->
    <div class="loader-container" id="loader">
        <div class="cyber-ring">
            <div class="ring"></div>
            <div class="ring"></div>
            <div class="ring"></div>
            <div class="ring"></div>
            <div class="ring"></div>
            <div class="progress-text glow-text hologram-effect" id="progress-text">LOADING</div>
        </div>
        <div class="percentage-container">
            <span id="percentage-counter">0%</span> COMPLETE
        </div>
        <div class="status-message hologram-effect" id="status-message">Initializing secure connection...</div>
        <div class="binary-bg" id="binary-bg"></div>
        <!-- Particle effects -->
        <div id="particles-container"></div>
        <!-- Data streams -->
        <div id="data-streams-container"></div>
    </div>

    <!-- Welcome Animation -->
    <div class="welcome-container" id="welcome-animation">
        <h1 class="welcome-text">Welcome to Shoten</h1>
        <div class="binary-bg" id="welcome-binary-bg"></div>
    </div>

    <!-- Animated Background Text -->
    <div class="absolute inset-0 flex justify-center items-center">
        <h1 class="animate-glitch">ショップ</h1>
    </div>

    <!-- Login Form -->
    <div class="bg-gray-900 bg-opacity-70 p-8 rounded-2xl shadow-lg w-96 text-center relative">
        <h2 class="text-3xl font-bold text-[#00ffff] mb-6">Welcome Back</h2>
        <form action="/login" method="POST" class="space-y-4" id="loginform">
            <input 
                type="email" name="email" placeholder="Enter your email" 
                class="w-full p-3 rounded-xl bg-gray-800 text-[#00ffff] placeholder-gray-400 focus:ring-2 focus:ring-[#00ffff]" novalidate
                id="email" oninput="emailValidateChecking()"
            />
            <div id="error1" class="error-message"></div>
            <input 
                type="password" name="password" placeholder="Enter your password" 
                class="w-full p-3 rounded-xl bg-gray-800 text-[#00ffff] placeholder-gray-400 focus:ring-2 focus:ring-[#00ffff]" novalidate
                id="password" oninput="passValidateChecking()"
            />
            <div id="error2" class="error-message"></div>

            <% if(locals.message && message.length > 0) { %>
                <div class="alert alert-danger text-center" style="color: red;">
                    <%= message %>
                </div>
            <% } %>

            <div class="flex items-center mt-2">
                <input type="checkbox" id="show-password" class="mr-2">
                <label for="show-password" class="text-sm text-gray-400">Show Password</label>
            </div>
            <!-- Forgot Password Link -->
            <div class="text-right">
                <a href="/forgot-password" class="text-sm text-[#00ffff] hover:underline">Forgot Password?</a>
            </div>
            <button 
                type="submit" 
                class="w-full p-3 bg-[#00ffff] rounded-xl font-bold text-black hover:bg-[#0088ff] transition relative overflow-hidden"
            >
                Login
            </button>
        </form>
        <div class="my-4 border-b border-gray-700"></div>
        <a href="/auth/google" class="w-full flex items-center justify-center p-3 bg-gray-800 rounded-xl hover:bg-gray-700 transition" id="google-login">
            <img src="https://imgs.search.brave.com/cMeR-TEzSzc3L_T_t4c0ZKSZu5B4BxkMPGrZ48urikE/rs:fit:860:0:0:0/g:ce/aHR0cHM6Ly9jZG4x/Lmljb25maW5kZXIu/Y29tL2RhdGEvaWNv/bnMvZ29vZ2xlLXMt/bG9nby8xNTAvR29v/Z2xlX0ljb25zLTA5/LTUxMi5wbmc" class="w-6 h-6 mr-2" alt="Google Logo"> Login with Google
        </a>
        <p class="mt-4 text-gray-400 text-sm">
            Don't have an account? <a href="/signup" class="text-[#00ffff] hover:underline">Sign up</a>
        </p>
    </div>

<script>
    // Loader Functions & Animation
    let loaderTimeout = null;
    const MIN_LOADER_DURATION = 1000; // 1 second minimum display time for faster animation
    
    // Fun status messages
    const statusMessages = [
        "Initializing secure connection...",
        "Bypassing neural firewall...",
        "Decoding quantum encryption...", 
        "Synchronizing neural interfaces...",
        "Hacking the mainframe...",
        "Enhancing digital signatures...",
        "Compiling binary matrices...",
        "Calibrating cyberspace protocols...",
        "Processing data packets...",
        "Establishing secure channel..."
    ];
    
    function showLoader() {
        console.log('Showing loader');
        clearTimeout(loaderTimeout);
        document.getElementById('loader').classList.add('active');

        const percentageCounter = document.getElementById('percentage-counter');
        const statusMessage = document.getElementById('status-message');
        const progressText = document.getElementById('progress-text');
        const binaryBg = document.getElementById('binary-bg');

        binaryBg.innerHTML = '';
        generateBinaryBackground();
        createParticleEffect();
        createDataStreams();

        let count = 0;
        percentageCounter.textContent = '0%';
        let messageIndex = 0;
        statusMessage.textContent = statusMessages[messageIndex];

        const counterInterval = setInterval(() => {
            count += Math.floor(Math.random() * 10) + 5;
            if (count > 100) count = 100;
            percentageCounter.textContent = count + '%';

            if (count % 20 === 0) {
                messageIndex = (messageIndex + 1) % statusMessages.length;
                statusMessage.textContent = statusMessages[messageIndex];
                // Add glitch effect on message change
                statusMessage.style.animation = 'none';
                setTimeout(() => {
                    statusMessage.style.animation = 'hologram-flicker 0.1s infinite';
                }, 10);
            }

            const dots = ".".repeat(Math.floor(count / 25) + 1);
            progressText.textContent = "LOADING" + dots;

            if (count === 100) {
                clearInterval(counterInterval);
                progressText.textContent = "ACCESS GRANTED";
                progressText.style.color = '#00ff88';
                statusMessage.textContent = "Welcome to the system...";
            }
        }, 50);
    }

    function createParticleEffect() {
        const particlesContainer = document.getElementById('particles-container');
        particlesContainer.innerHTML = '';

        for (let i = 0; i < 50; i++) {
            const particle = document.createElement('div');
            particle.className = 'particle';
            particle.style.left = Math.random() * 100 + '%';
            particle.style.animationDelay = Math.random() * 3 + 's';
            particle.style.animationDuration = (Math.random() * 2 + 2) + 's';
            particlesContainer.appendChild(particle);
        }
    }

    function createDataStreams() {
        const streamsContainer = document.getElementById('data-streams-container');
        streamsContainer.innerHTML = '';

        for (let i = 0; i < 10; i++) {
            const stream = document.createElement('div');
            stream.className = 'data-stream';
            stream.style.top = Math.random() * 100 + '%';
            stream.style.width = (Math.random() * 200 + 100) + 'px';
            stream.style.animationDelay = Math.random() * 2 + 's';
            stream.style.animationDuration = (Math.random() * 1 + 1.5) + 's';
            streamsContainer.appendChild(stream);
        }
    }
    
    function generateBinaryBackground(containerId = 'binary-bg') {
        const binaryBg = document.getElementById(containerId);
        const characters = '01';
        const rows = 50;
        const cols = 100;
        
        for (let i = 0; i < rows; i++) {
            const row = document.createElement('div');
            let rowContent = '';
            for (let j = 0; j < cols; j++) {
                rowContent += characters.charAt(Math.floor(Math.random() * characters.length));
            }
            row.textContent = rowContent;
            binaryBg.appendChild(row);
        }
        
        setInterval(() => {
            const rows = binaryBg.children;
            for (let i = 0; i < rows.length; i++) {
                if (Math.random() > 0.7) {
                    const position = Math.floor(Math.random() * cols);
                    const rowText = rows[i].textContent;
                    const newChar = characters.charAt(Math.floor(Math.random() * characters.length));
                    rows[i].textContent = rowText.substring(0, position) + newChar + rowText.substring(position + 1);
                }
            }
        }, 50);
    }

    function hideLoader() {
        console.log('Scheduling loader hide');
        loaderTimeout = setTimeout(() => {
            console.log('Hiding loader');
            document.getElementById('loader').classList.remove('active');
        }, MIN_LOADER_DURATION);
    }

    function showWelcomeAnimation(callback) {
        console.log('Showing welcome animation');
        const welcomeContainer = document.getElementById('welcome-animation');
        const welcomeBinaryBg = document.getElementById('welcome-binary-bg');
        welcomeBinaryBg.innerHTML = '';
        generateBinaryBackground('welcome-binary-bg');
        
        welcomeContainer.classList.add('active');
        
        setTimeout(() => {
            welcomeContainer.classList.remove('active');
            if (callback) callback();
        }, 3000); // Matches the duration of fadeInOut animation
    }

    // Validation Logic
    const emailid = document.getElementById("email");
    const passid = document.getElementById("password");
    const error1 = document.getElementById("error1");
    const error2 = document.getElementById("error2");
    const loginform = document.getElementById("loginform");

    function emailValidateChecking() {
        const emailval = emailid.value.trim();
        const emailpattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

        if (emailval === "") {
            error1.style.display = "block";
            error1.innerHTML = "Please enter a valid email";
        } else if (!emailpattern.test(emailval)) {
            error1.style.display = "block";
            error1.innerHTML = "Not a valid email";
        } else {
            error1.style.display = "none";
            error1.innerHTML = "";
        }
    }

    function passValidateChecking() {
        const passval = passid.value.trim();

        if (passval === "") {
            error2.style.display = "block";
            error2.innerHTML = "Please enter a password";
        } else if (passval.length < 8) {
            error2.style.display = "block";
            error2.innerHTML = "Password should contain at least 8 characters";
        } else {
            error2.style.display = "none";
            error2.innerHTML = "";
        }
    }

    document.addEventListener("DOMContentLoaded", function () {
        showLoader();
        setTimeout(hideLoader, MIN_LOADER_DURATION);

        loginform.addEventListener("submit", function (e) {
            // Perform client-side validation
            emailValidateChecking();
            passValidateChecking();

            if (
                error1.style.display === "block" ||
                error2.style.display === "block"
            ) {
                e.preventDefault();
                return;
            }

            // Show loader before submitting the form
            showLoader();

            // Let the form submit naturally
            // The server will either redirect to /home or render login.ejs with an error message
        });

        const googleLogin = document.getElementById("google-login");
        if (googleLogin) {
            googleLogin.addEventListener("click", function () {
                console.log('Google login clicked, showing loader');
                showLoader();
            });
        }

        document.getElementById("show-password").addEventListener("change", function () {
            const passInput = document.querySelector('input[name="password"]');
            passInput.type = this.checked ? "text" : "password";
        });

        // Check if the page loaded with a successful login (e.g., redirected back after login)
        if (window.location.pathname === '/home') {
            showWelcomeAnimation(() => {
                // Already on /home, no further redirect needed
            });
        }

        // Show SweetAlert for authentication message
        <% if (typeof authMessage !== 'undefined' && authMessage) { %>
            Swal.fire({
                title: '🔒 Authentication Required',
                text: '<%= authMessage %>',
                icon: 'info',
                confirmButtonText: 'Got it!',
                confirmButtonColor: '#00ffff',
                background: '#1f2937',
                color: '#ffffff',
                customClass: {
                    popup: 'cyber-alert',
                    title: 'cyber-title',
                    content: 'cyber-content'
                },
                showClass: {
                    popup: 'animate__animated animate__fadeInDown'
                },
                hideClass: {
                    popup: 'animate__animated animate__fadeOutUp'
                }
            });
        <% } %>
    });
</script>

<!-- Custom SweetAlert Styling -->
<style>
.cyber-alert {
    border: 2px solid #00ffff !important;
    box-shadow: 0 0 20px rgba(0, 255, 255, 0.3) !important;
}

.cyber-title {
    color: #00ffff !important;
    text-shadow: 0 0 10px #00ffff !important;
}

.cyber-content {
    color: #ffffff !important;
}

.swal2-confirm {
    background: linear-gradient(135deg, #00ffff, #0088ff) !important;
    color: black !important;
    font-weight: bold !important;
    border: none !important;
    box-shadow: 0 4px 15px rgba(0, 255, 255, 0.3) !important;
}

.swal2-confirm:hover {
    background: linear-gradient(135deg, #0088ff, #00ffff) !important;
    transform: scale(1.05) !important;
}
</style>
</html>