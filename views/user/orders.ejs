<%- include("../../views/user/partials/header") %>

<!-- SweetAlert2 CDN -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- Razorpay CDN -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<!-- Orders Management Page -->
<div class="min-h-screen bg-black">
    <!-- Orders Header -->
    <div class="relative bg-gradient-to-r from-gray-900 via-black to-gray-900 pt-20 pb-16">
        <!-- Animated background particles -->
        <div class="absolute inset-0 overflow-hidden">
            <div class="floating-particles" id="orders-particles"></div>
        </div>
        
        <div class="relative max-w-6xl mx-auto px-8">
            <div class="text-center mb-8">
                <h1 class="text-5xl font-bold text-[#00ffff] mb-4 animate-fade-in-up">
                    üì¶ MY ORDERS
                </h1>
                <p class="text-gray-400 text-lg animate-fade-in-up" style="animation-delay: 0.2s;">
                    Track and manage your orders
                </p>
            </div>
        </div>
    </div>

    <!-- Orders Content -->
    <div class="max-w-6xl mx-auto px-8 py-12">
        
        <!-- Search and Filter Section -->
        <div class="bg-gray-800 rounded-2xl p-6 shadow-xl mb-8 animate-fade-in-up">
            <div class="flex flex-col md:flex-row gap-4 items-center">
                <div class="flex-1">
                    <div class="relative">
                        <input type="text" id="order-search" placeholder="Search by Order ID, Product Name..." 
                               class="w-full pl-10 pr-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:border-[#00ffff] focus:outline-none">
                        <svg class="absolute left-3 top-3.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                    </div>
                </div>
                <div class="flex gap-4">
                    <select id="status-filter" class="px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:border-[#00ffff] focus:outline-none">
                        <option value="">All Status</option>
                        <option value="Processing">Processing</option>
                        <option value="Shipped">Shipped</option>
                        <option value="Delivered">Delivered</option>
                        <option value="Cancelled">Cancelled</option>
                        <option value="Returned">Returned</option>
                        <option value="Payment Failed">Payment Failed</option>
                    </select>
                    <select id="date-filter" class="px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:border-[#00ffff] focus:outline-none">
                        <option value="">All Time</option>
                        <option value="7">Last 7 days</option>
                        <option value="30">Last 30 days</option>
                        <option value="90">Last 3 months</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Orders List -->
        <div id="orders-container">
            <% if (orders && orders.length > 0) { %>
                <% orders.forEach(order => { %>
                    <div class="order-card bg-gray-800 rounded-2xl p-6 shadow-xl hover:shadow-2xl hover:shadow-[#00ffff]/20 transition-all duration-300 mb-6 animate-fade-in-up"
                         data-order-id="<%= order._id %>" data-order-number="<%= order.orderId %>" data-status="<%= order.orderedItems[0]?.status || 'Processing' %>">
                        
                        <!-- Order Header -->
                        <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-4 pb-4 border-b border-gray-700">
                            <div>
                                <h3 class="text-xl font-bold text-white mb-2">
                                    Order #<%= order.orderId %>
                                </h3>
                                <div class="flex flex-wrap gap-4 text-sm text-gray-400">
                                    <span>üìÖ Placed: <%= new Date(order.createdOn).toLocaleDateString() %></span>
                                    <span>üí∞ Total: ‚Çπ<%= ((order.totalPrice || 0) + (order.shippingCharge || 0) - (order.discount || 0)).toLocaleString() %></span>
                                    <span>üì¶ Items: <%= order.orderedItems.length %></span>
                                </div>
                            </div>
                            <div class="flex flex-col items-end gap-2">
                                <span class="px-3 py-1 rounded-full text-sm font-semibold
                                    <% const status = order.status || order.orderedItems[0]?.status || 'Processing'; %>
                                    <% if (status === 'Processing') { %>bg-yellow-500/20 text-yellow-400
                                    <% } else if (status === 'Shipped') { %>bg-blue-500/20 text-blue-400
                                    <% } else if (status === 'Delivered') { %>bg-green-500/20 text-green-400
                                    <% } else if (status === 'Cancelled') { %>bg-red-500/20 text-red-400
                                    <% } else if (status === 'Returned') { %>bg-purple-500/20 text-purple-400
                                    <% } else if (status === 'Payment Failed') { %>bg-orange-500/20 text-orange-400
                                    <% } else { %>bg-gray-500/20 text-gray-400<% } %>">
                                    <%= status %>
                                </span>

                                <!-- Retry Payment Button for Payment Failed Orders -->
                                <% if (status === 'Payment Failed') { %>
                                <button onclick="retryPayment('<%= order.orderId %>')"
                                        class="mt-2 px-4 py-2 bg-[#00ffff] text-black rounded-lg hover:bg-[#0088ff] transition-colors duration-300 font-semibold">
                                    üîÑ Retry Payment
                                </button>
                                <% } %>
                                <div class="flex gap-2">
                                    <button class="view-order-details-btn px-3 py-1 bg-[#00ffff] text-black rounded text-sm hover:bg-[#0088ff] transition"
                                            data-order-id="<%= order._id %>">
                                        üëÅÔ∏è Quick View
                                    </button>
                                  
                                    <button class="view-order-btn px-3 py-1 bg-blue-500 text-white rounded text-sm hover:bg-blue-600 transition"
                                            data-order-id="<%= order._id %>">
                                        üìã Full Details
                                    </button>
                                    <%
                                        // Check if any item is shipped or delivered for invoice availability
                                        const allowedStatuses = ['Shipped', 'Out for Delivery', 'Delivered'];
                                        const hasShippedOrDeliveredItems = order.orderedItems.some(item =>
                                            allowedStatuses.includes(item.status)
                                        );
                                    %>
                                    <% if (hasShippedOrDeliveredItems && status !== 'Payment Failed') { %>
                                        <button class="download-invoice-btn px-3 py-1 bg-gray-600 text-white rounded text-sm hover:bg-gray-700 transition"
                                                data-order-id="<%= order._id %>">
                                            üìÑ Invoice
                                        </button>
                                    <% } else if (status !== 'Payment Failed') { %>
                                        <button class="px-3 py-1 bg-gray-400 text-gray-600 rounded text-sm cursor-not-allowed"
                                                disabled title="Invoice available after shipping">
                                            üìÑ Invoice
                                        </button>
                                    <% } %>
                                </div>
                            </div>
                        </div>

                        <!-- Order Items -->
                        <div class="space-y-3">
                            <% order.orderedItems.forEach((item, index) => { %>
                                <div class="flex items-center gap-4 p-3 bg-gray-700 rounded-lg">
                                    <div class="w-16 h-16 bg-gray-600 rounded-lg flex items-center justify-center">
                                        <% if (item.product && item.product.productImage && item.product.productImage.length > 0) { %>
                                            <img src="/uploads/product-images/<%= item.product.productImage[0] %>"
                                                 alt="<%= item.product.productName || 'Product' %>"
                                                 class="w-full h-full object-cover rounded-lg"
                                                 onerror="this.src='/images/placeholder.jpg'">
                                        <% } else { %>
                                            <span class="text-2xl">üì¶</span>
                                        <% } %>
                                    </div>
                                    <div class="flex-1">
                                        <h4 class="text-white font-semibold">
                                            <%= item.product?.productName || `Product #${index + 1}` %>
                                        </h4>
                                        <% if (item.product?.category?.name) { %>
                                            <p class="text-gray-400 text-xs mb-1">
                                                Category: <%= item.product.category.name %>
                                            </p>
                                        <% } %>
                                        <p class="text-gray-400 text-sm">
                                            Quantity: <%= item.quantity %> |
                                            Price:
                                            <% if (item.hasOffer && item.finalPrice < item.originalPrice) { %>
                                                <span class="text-[#00ffff]">‚Çπ<%= item.finalPrice.toLocaleString() %></span>
                                                <span class="line-through text-gray-500 text-xs ml-1">‚Çπ<%= item.originalPrice.toLocaleString() %></span>
                                            <% } else { %>
                                                ‚Çπ<%= item.price.toLocaleString() %>
                                            <% } %>
                                        </p>
                                        <% if (item.hasOffer && item.offerInfo) { %>
                                            <p class="text-green-400 text-xs">
                                                <i class="fas fa-tag"></i> <%= item.offerInfo.name %>
                                            </p>
                                        <% } %>
                                        <span class="inline-block px-2 py-1 rounded text-xs font-semibold mt-1
                                            <% if (item.status === 'Processing') { %>bg-yellow-500/20 text-yellow-400
                                            <% } else if (item.status === 'Shipped') { %>bg-blue-500/20 text-blue-400
                                            <% } else if (item.status === 'Delivered') { %>bg-green-500/20 text-green-400
                                            <% } else if (item.status === 'Cancelled') { %>bg-red-500/20 text-red-400
                                            <% } else if (item.status === 'Returned') { %>bg-purple-500/20 text-purple-400
                                            <% } else { %>bg-gray-500/20 text-gray-400<% } %>">
                                            <%= item.status %>
                                        </span>
                                    </div>
                                    <div class="flex flex-col gap-2">
                                        <% if (item.status === 'Processing' || item.status === 'Shipped') { %>
                                            <button class="cancel-item-btn px-3 py-1 bg-red-500 text-white rounded text-sm hover:bg-red-600 transition"
                                                    data-order-id="<%= order._id %>" data-item-index="<%= index %>">
                                                ‚ùå Cancel
                                            </button>
                                        <% } %>
                                        <% if (item.status === 'Delivered') { %>
                                            <button class="return-item-btn px-3 py-1 bg-orange-500 text-white rounded text-sm hover:bg-orange-600 transition"
                                                    data-order-id="<%= order._id %>" data-item-index="<%= index %>">
                                                üîÑ Return
                                            </button>
                                        <% } %>
                                    </div>
                                </div>
                            <% }) %>
                        </div>

                        <!-- Order Actions -->
                        <div class="flex flex-wrap gap-3 mt-4 pt-4 border-t border-gray-700">
                            <% 
                                const canCancelOrder = order.orderedItems.some(item => 
                                    item.status === 'Processing' || item.status === 'Shipped'
                                );
                                const canReturnOrder = order.orderedItems.some(item => 
                                    item.status === 'Delivered'
                                );
                            %>
                            <% if (canCancelOrder) { %>
                                <button class="cancel-order-btn px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition"
                                        data-order-id="<%= order._id %>">
                                    ‚ùå Cancel Entire Order
                                </button>
                            <% } %>
                            <% if (canReturnOrder) { %>
                                <button class="return-order-btn px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition"
                                        data-order-id="<%= order._id %>">
                                    üîÑ Return Order
                                </button>
                            <% } %>
                        </div>
                    </div>
                <% }) %>
            <% } else { %>
                <!-- Empty State -->
                <div class="text-center py-16">
                    <div class="text-8xl mb-6">üì¶</div>
                    <h3 class="text-2xl font-bold text-gray-300 mb-4">No Orders Found</h3>
                    <p class="text-gray-400 mb-8">You haven't placed any orders yet. Start shopping to see your orders here!</p>
                    <a href="/shop" class="px-8 py-3 bg-[#00ffff] text-black rounded-lg hover:bg-[#0088ff] transition-all duration-300 transform hover:scale-105 font-semibold">
                        üõçÔ∏è Start Shopping
                    </a>
                </div>
            <% } %>
        </div>

        <!-- Enhanced Pagination -->
        <% if (totalPages > 1) { %>
            <div class="flex justify-center mt-8">
                <nav class="pagination-nav">
                    <!-- Previous Button -->
                    <% if (currentPage > 1) { %>
                        <a href="/orders?page=<%= currentPage - 1 %><%= status ? '&status=' + status : '' %><%= search ? '&search=' + search : '' %><%= dateFilter ? '&dateFilter=' + dateFilter : '' %>"
                           class="px-4 py-2 rounded-lg bg-gray-700 text-white hover:bg-gray-600 transition-all duration-300 flex items-center gap-2">
                            <span>‚Üê</span> Previous
                        </a>
                    <% } else { %>
                        <span class="px-4 py-2 rounded-lg bg-gray-800 text-gray-500 cursor-not-allowed flex items-center gap-2">
                            <span>‚Üê</span> Previous
                        </span>
                    <% } %>

                    <!-- Page Numbers -->
                    <%
                        let startPage = Math.max(1, currentPage - 2);
                        let endPage = Math.min(totalPages, currentPage + 2);

                        // Adjust if we're near the beginning or end
                        if (currentPage <= 3) {
                            endPage = Math.min(5, totalPages);
                        }
                        if (currentPage > totalPages - 3) {
                            startPage = Math.max(1, totalPages - 4);
                        }
                    %>

                    <!-- First page if not in range -->
                    <% if (startPage > 1) { %>
                        <a href="/orders?page=1<%= status ? '&status=' + status : '' %><%= search ? '&search=' + search : '' %><%= dateFilter ? '&dateFilter=' + dateFilter : '' %>"
                           class="px-4 py-2 rounded-lg bg-gray-700 text-white hover:bg-gray-600 transition-all duration-300">
                            1
                        </a>
                        <% if (startPage > 2) { %>
                            <span class="px-2 py-2 text-gray-400">...</span>
                        <% } %>
                    <% } %>

                    <!-- Page number range -->
                    <% for (let i = startPage; i <= endPage; i++) { %>
                        <a href="/orders?page=<%= i %><%= status ? '&status=' + status : '' %><%= search ? '&search=' + search : '' %><%= dateFilter ? '&dateFilter=' + dateFilter : '' %>"
                           class="px-4 py-2 rounded-lg transition-all duration-300 <%= currentPage === i ? 'bg-[#00ffff] text-black font-bold shadow-lg shadow-[#00ffff]/30' : 'bg-gray-700 text-white hover:bg-gray-600' %>">
                            <%= i %>
                        </a>
                    <% } %>

                    <!-- Last page if not in range -->
                    <% if (endPage < totalPages) { %>
                        <% if (endPage < totalPages - 1) { %>
                            <span class="px-2 py-2 text-gray-400">...</span>
                        <% } %>
                        <a href="/orders?page=<%= totalPages %><%= status ? '&status=' + status : '' %><%= search ? '&search=' + search : '' %><%= dateFilter ? '&dateFilter=' + dateFilter : '' %>"
                           class="px-4 py-2 rounded-lg bg-gray-700 text-white hover:bg-gray-600 transition-all duration-300">
                            <%= totalPages %>
                        </a>
                    <% } %>

                    <!-- Next Button -->
                    <% if (currentPage < totalPages) { %>
                        <a href="/orders?page=<%= currentPage + 1 %><%= status ? '&status=' + status : '' %><%= search ? '&search=' + search : '' %><%= dateFilter ? '&dateFilter=' + dateFilter : '' %>"
                           class="px-4 py-2 rounded-lg bg-gray-700 text-white hover:bg-gray-600 transition-all duration-300 flex items-center gap-2">
                            Next <span>‚Üí</span>
                        </a>
                    <% } else { %>
                        <span class="px-4 py-2 rounded-lg bg-gray-800 text-gray-500 cursor-not-allowed flex items-center gap-2">
                            Next <span>‚Üí</span>
                        </span>
                    <% } %>
                </nav>
            </div>

            <!-- Pagination Info -->
            <div class="text-center mt-4">
                <p class="text-gray-400 text-sm">
                    Showing page <%= currentPage %> of <%= totalPages %>
                    <% if (typeof totalOrders !== 'undefined') { %>
                        (Total: <%= totalOrders %> orders)
                    <% } %>
                </p>
            </div>
        <% } %>
    </div>
</div>

<!-- Order Details Modal -->
<div id="orderDetailsModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center p-4">
    <div class="bg-gray-800 rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div class="sticky top-0 bg-gray-800 border-b border-gray-700 p-6 flex justify-between items-center">
            <h2 class="text-2xl font-bold text-white">Order Details</h2>
            <button onclick="closeOrderModal()" class="text-gray-400 hover:text-white text-2xl">√ó</button>
        </div>
        <div id="orderModalContent" class="p-6">
            <!-- Order details will be loaded here -->
            <div class="text-center py-8">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-[#00ffff] mx-auto mb-4"></div>
                <p class="text-gray-400">Loading order details...</p>
            </div>
        </div>
        <div class="sticky bottom-0 bg-gray-800 border-t border-gray-700 p-6 flex justify-end gap-4">
            <button onclick="closeOrderModal()" class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition">
                Close
            </button>
            <button id="viewFullOrderBtn" class="px-4 py-2 bg-[#00ffff] text-black rounded-lg hover:bg-[#0088ff] transition">
                View Full Details
            </button>
        </div>
    </div>
</div>

<!-- External JavaScript Files -->
<script src="/js/orders.js"></script>
<script src="/js/order-actions.js"></script>

<!-- Order Details Modal Functions -->
<script>
// Order Details Modal Functions
function viewOrderDetails(orderId) {
    // Show modal
    document.getElementById('orderDetailsModal').classList.remove('hidden');

    // Set full details button
    document.getElementById('viewFullOrderBtn').onclick = function() {
        window.location.href = `/orders/${orderId}`;
    };

    // Fetch order details
    fetch(`/api/orders/${orderId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                displayUserOrderDetails(data.order);
            } else {
                document.getElementById('orderModalContent').innerHTML = `
                    <div class="bg-red-500/10 border border-red-500/20 rounded-lg p-4">
                        <div class="flex items-center">
                            <span class="text-red-400 text-xl mr-3">‚ö†Ô∏è</span>
                            <div>
                                <h3 class="text-red-400 font-semibold">Error Loading Order</h3>
                                <p class="text-red-300">${data.message}</p>
                            </div>
                        </div>
                    </div>
                `;
            }
        })
        .catch(error => {
            document.getElementById('orderModalContent').innerHTML = `
                <div class="bg-red-500/10 border border-red-500/20 rounded-lg p-4">
                    <div class="flex items-center">
                        <span class="text-red-400 text-xl mr-3">‚ö†Ô∏è</span>
                        <div>
                            <h3 class="text-red-400 font-semibold">Connection Error</h3>
                            <p class="text-red-300">Failed to load order details. Please try again.</p>
                        </div>
                    </div>
                </div>
            `;
        });
}

function closeOrderModal() {
    document.getElementById('orderDetailsModal').classList.add('hidden');
}

function displayUserOrderDetails(order) {
    const content = `
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Order Information -->
            <div class="lg:col-span-2">
                <div class="bg-gray-700 rounded-xl p-6 mb-6">
                    <div class="flex justify-between items-start mb-4">
                        <div>
                            <h3 class="text-xl font-bold text-white">Order #${order.orderId}</h3>
                            <p class="text-gray-400">${new Date(order.createdOn).toLocaleDateString()} at ${new Date(order.createdOn).toLocaleTimeString()}</p>
                        </div>
                        <span class="px-3 py-1 rounded-full text-sm font-semibold ${getUserStatusClass(order.status)}">
                            ${order.status}
                        </span>
                    </div>

                    <!-- Order Items -->
                    <div class="space-y-4">
                        <h4 class="text-lg font-semibold text-white">Order Items</h4>
                        ${order.orderedItems.map(item => `
                            <div class="border border-gray-600 rounded-lg p-4">
                                <div class="flex items-start gap-4">
                                    <div class="w-16 h-16 bg-gray-600 rounded-lg flex items-center justify-center">
                                        ${item.product?.productImage && item.product.productImage.length > 0 ?
                                            `<img src="/uploads/product-images/${item.product.productImage[0]}" alt="${item.product.productName}" class="w-full h-full object-cover rounded-lg">` :
                                            '<span class="text-2xl">üì¶</span>'
                                        }
                                    </div>
                                    <div class="flex-1">
                                        <h5 class="text-white font-semibold">${item.product?.productName || 'Product Not Found'}</h5>
                                        <div class="grid grid-cols-2 gap-4 text-sm text-gray-400 mt-2">
                                            <div><span class="font-medium">Quantity:</span> ${item.quantity}</div>
                                            <div>
                                                <span class="font-medium">Price:</span>
                                                ${item.hasOffer && item.finalPrice < item.originalPrice ?
                                                    `<span class="text-cyan-400">‚Çπ${item.finalPrice.toLocaleString()}</span> <span class="line-through text-gray-500 text-sm">‚Çπ${item.originalPrice.toLocaleString()}</span>` :
                                                    `‚Çπ${item.price.toLocaleString()}`
                                                }
                                            </div>
                                            <div>
                                                <span class="font-medium">Total:</span>
                                                ‚Çπ${(item.hasOffer && item.finalPrice ? item.finalPrice * item.quantity : item.price * item.quantity).toLocaleString()}
                                            </div>
                                            ${item.hasOffer && item.offerInfo ?
                                                `<div><span class="font-medium">Offer:</span> <span class="text-green-400"><i class="fas fa-tag"></i> ${item.offerInfo.name}</span></div>` :
                                                ''
                                            }
                                            <div>
                                                <span class="font-medium">Status:</span>
                                                <span class="px-2 py-1 rounded text-xs font-semibold ml-1 ${getUserStatusClass(item.status)}">
                                                    ${item.status}
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            </div>

            <!-- Order Summary -->
            <div class="space-y-6">
                <!-- Summary -->
                <div class="bg-gray-700 rounded-xl p-6">
                    <h4 class="text-lg font-bold text-white mb-4">üí∞ Order Summary</h4>
                    <div class="space-y-3 text-sm">
                        <div class="flex justify-between">
                            <span class="text-gray-400">Subtotal:</span>
                            <span class="text-white">‚Çπ${(order.totalPrice || 0).toLocaleString()}</span>
                        </div>
                        ${(order.taxAmount || 0) > 0 ? `
                            <div class="flex justify-between">
                                <span class="text-gray-400">Tax (18% GST):</span>
                                <span class="text-white">‚Çπ${order.taxAmount.toLocaleString()}</span>
                            </div>
                        ` : ''}
                        ${(order.shippingCharge || 0) > 0 ? `
                            <div class="flex justify-between">
                                <span class="text-gray-400">Shipping:</span>
                                <span class="text-white">‚Çπ${order.shippingCharge.toLocaleString()}</span>
                            </div>
                        ` : ''}
                        ${(order.discount || 0) > 0 ? `
                            <div class="flex justify-between">
                                <span class="text-gray-400">Coupon Discount:</span>
                                <span class="text-green-400">-‚Çπ${order.discount.toLocaleString()}</span>
                            </div>
                        ` : ''}
                        <hr class="border-gray-600">
                        <div class="flex justify-between text-lg font-bold">
                            <span class="text-white">Total:</span>
                            <span class="text-[#00ffff]">‚Çπ${((order.totalPrice || 0) + (order.taxAmount || 0) + (order.shippingCharge || 0) - (order.discount || 0)).toLocaleString()}</span>
                        </div>
                    </div>
                </div>

                <!-- Payment Info -->
                <div class="bg-gray-700 rounded-xl p-6">
                    <h4 class="text-lg font-bold text-white mb-4">üí≥ Payment</h4>
                    <div class="space-y-2 text-sm">
                        <div class="flex justify-between">
                            <span class="text-gray-400">Method:</span>
                            <span class="text-white">${order.paymentMethod || 'Cash on Delivery'}</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;

    document.getElementById('orderModalContent').innerHTML = content;
}

function getUserStatusClass(status) {
    switch(status) {
        case 'Pending': return 'bg-gray-500/20 text-gray-400';
        case 'Processing': return 'bg-yellow-500/20 text-yellow-400';
        case 'Shipped': return 'bg-blue-500/20 text-blue-400';
        case 'Out for Delivery': return 'bg-purple-500/20 text-purple-400';
        case 'Delivered': return 'bg-green-500/20 text-green-400';
        case 'Cancelled': return 'bg-red-500/20 text-red-400';
        case 'Return Request': return 'bg-orange-500/20 text-orange-400';
        case 'Returned': return 'bg-purple-500/20 text-purple-400';
        default: return 'bg-gray-500/20 text-gray-400';
    }
}

// Update existing event listeners
document.addEventListener('DOMContentLoaded', function() {
    // Quick view buttons
    document.querySelectorAll('.view-order-details-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const orderId = this.getAttribute('data-order-id');
            viewOrderDetails(orderId);
        });
    });

    // Cancel order buttons
    document.querySelectorAll('.cancel-order-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.preventDefault(); // Prevent default button action
            const orderId = this.getAttribute('data-order-id');
            showCancelOrderModal(orderId);
        });
    });

    // Cancel item buttons
    document.querySelectorAll('.cancel-item-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.preventDefault(); // Prevent default button action
            const orderId = this.getAttribute('data-order-id');
            const itemIndex = this.getAttribute('data-item-index');
            showCancelItemModal(orderId, itemIndex);
        });
    });

    // Close modal on outside click
    document.getElementById('orderDetailsModal').addEventListener('click', function(e) {
        if (e.target === this) {
            closeOrderModal();
        }
    });
});
</script>

<!-- Initialize with server data -->
<script>
// Pass server data to JavaScript
<% if (typeof orderMessage !== 'undefined' && orderMessage) { %>
    const orderMessage = {
        type: '<%= orderMessage.type %>',
        text: '<%= orderMessage.text %>'
    };
<% } %>
</script>







<!-- Enhanced CSS for Orders Page -->
<style>
/* Orders specific styles */
.order-card {
    transition: all 0.3s ease;
}

.order-card:hover {
    transform: translateY(-2px);
}

/* Enhanced animations */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes particle-float {
    0% {
        transform: translateY(100vh) translateX(0px) rotate(0deg);
        opacity: 0;
    }
    10% {
        opacity: 1;
    }
    90% {
        opacity: 1;
    }
    100% {
        transform: translateY(-100vh) translateX(100px) rotate(360deg);
        opacity: 0;
    }
}

.animate-fade-in-up {
    animation: fadeInUp 0.6s ease-out forwards;
    opacity: 0;
}

/* Floating particles */
.floating-particles {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    overflow: hidden;
}

.particle {
    position: absolute;
    width: 4px;
    height: 4px;
    background: #00ffff;
    border-radius: 50%;
    animation: particle-float 8s linear infinite;
}

.particle:nth-child(2n) {
    background: #ff0066;
    animation-duration: 10s;
}

.particle:nth-child(3n) {
    background: #ffcc00;
    animation-duration: 12s;
}

/* Responsive design */
@media (max-width: 768px) {
    .order-card {
        margin-bottom: 1rem;
    }

    .flex.md\\:flex-row {
        flex-direction: column;
    }

    .flex.flex-col.md\\:flex-row {
        flex-direction: column;
        align-items: stretch;
    }
}

/* Button hover effects */
button:active {
    transform: scale(0.98);
}

/* Status badge animations */
.order-card .rounded-full {
    transition: all 0.3s ease;
}

.order-card:hover .rounded-full {
    transform: scale(1.05);
}

/* Enhanced Pagination Styles */
.pagination-nav {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    flex-wrap: wrap;
}

.pagination-nav a,
.pagination-nav span {
    transition: all 0.3s ease;
    border-radius: 0.5rem;
    font-weight: 500;
}

.pagination-nav a:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 255, 255, 0.2);
}

.pagination-nav .active {
    box-shadow: 0 0 20px rgba(0, 255, 255, 0.4);
    animation: pulse-glow 2s infinite;
}

@keyframes pulse-glow {
    0%, 100% {
        box-shadow: 0 0 20px rgba(0, 255, 255, 0.4);
    }
    50% {
        box-shadow: 0 0 30px rgba(0, 255, 255, 0.6);
    }
}

/* Responsive pagination */
@media (max-width: 640px) {
    .pagination-nav {
        gap: 0.25rem;
    }

    .pagination-nav a,
    .pagination-nav span {
        padding: 0.5rem 0.75rem;
        font-size: 0.875rem;
    }

    .pagination-nav .hidden-mobile {
        display: none;
    }
}
</style>

<script>
// Retry payment for failed orders
function retryPayment(orderId) {
    Swal.fire({
        title: 'üîÑ Retry Payment',
        text: 'Do you want to retry payment for this order?',
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#00ffff',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, Retry Payment',
        cancelButtonText: 'Cancel',
        background: '#1f2937',
        color: '#ffffff'
    }).then((result) => {
        if (result.isConfirmed) {
            // Show loading
            Swal.fire({
                title: 'Processing...',
                text: 'Initiating payment retry',
                allowOutsideClick: false,
                allowEscapeKey: false,
                showConfirmButton: false,
                background: '#1f2937',
                color: '#ffffff',
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            // Call retry payment API
            fetch(`/retry-payment-from-order/${orderId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success && data.paymentRequired) {
                    // Close loading and initiate Razorpay payment
                    Swal.close();
                    initiateRazorpayPayment(data.paymentOptions, data.tempOrderId);
                } else {
                    Swal.fire({
                        title: 'Error',
                        text: data.message || 'Failed to initiate payment retry',
                        icon: 'error',
                        confirmButtonColor: '#00ffff',
                        background: '#1f2937',
                        color: '#ffffff'
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error',
                    text: 'An error occurred while retrying payment',
                    icon: 'error',
                    confirmButtonColor: '#00ffff',
                    background: '#1f2937',
                    color: '#ffffff'
                });
            });
        }
    });
}

// Initialize Razorpay payment for retry
function initiateRazorpayPayment(paymentOptions, orderId) {
    const options = {
        key: paymentOptions.key,
        amount: paymentOptions.amount,
        currency: paymentOptions.currency,
        name: paymentOptions.name,
        description: paymentOptions.description,
        order_id: paymentOptions.order_id,
        handler: function(response) {
            // Payment successful
            verifyRetryPayment(response, orderId);
        },
        modal: {
            ondismiss: function() {
                // Payment cancelled
                Swal.fire({
                    title: 'Payment Cancelled',
                    text: 'Payment was cancelled. You can try again anytime.',
                    icon: 'info',
                    confirmButtonColor: '#00ffff',
                    background: '#1f2937',
                    color: '#ffffff'
                });
            }
        }
    };

    const rzp = new Razorpay(options);

    rzp.on('payment.failed', function(response) {
        // Payment failed
        Swal.fire({
            title: 'Payment Failed',
            text: response.error.description || 'Payment failed. Please try again.',
            icon: 'error',
            confirmButtonColor: '#00ffff',
            background: '#1f2937',
            color: '#ffffff'
        });
    });

    rzp.open();
}

// Verify retry payment
function verifyRetryPayment(response, orderId) {
    fetch('/verify-payment', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            razorpay_order_id: response.razorpay_order_id,
            razorpay_payment_id: response.razorpay_payment_id,
            razorpay_signature: response.razorpay_signature
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                title: 'üéâ Payment Successful!',
                text: 'Your payment has been completed successfully!',
                icon: 'success',
                confirmButtonColor: '#00ffff',
                background: '#1f2937',
                color: '#ffffff',
                timer: 3000,
                showConfirmButton: false
            }).then(() => {
                // Reload page to show updated order status
                window.location.reload();
            });
        } else {
            Swal.fire({
                title: 'Payment Verification Failed',
                text: data.message || 'Payment verification failed',
                icon: 'error',
                confirmButtonColor: '#00ffff',
                background: '#1f2937',
                color: '#ffffff'
            });
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            title: 'Error',
            text: 'An error occurred during payment verification',
            icon: 'error',
            confirmButtonColor: '#00ffff',
            background: '#1f2937',
            color: '#ffffff'
        });
    });
}
</script>

<%- include("../../views/user/partials/footer") %>
