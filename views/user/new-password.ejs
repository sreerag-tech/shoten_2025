<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reset Password - Shoten</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            background: black;
        }
        @keyframes glitch {
            0% { text-shadow: 2px 2px #ff0000, -2px -2px #00ffff; }
            25% { text-shadow: -2px -2px #ff0000, 2px 2px #00ffff; }
            50% { text-shadow: 2px -2px #ff0000, -2px 2px #00ffff; }
            75% { text-shadow: -2px 2px #ff0000, 2px -2px #00ffff; }
            100% { text-shadow: 2px 2px #ff0000, -2px -2px #00ffff; }
        }
        .animate-glitch {
            font-size: 8rem;
            font-weight: bold;
            color: #00ffff;
            animation: glitch 0.2s infinite;
        }
        .error {
            color: #ff0000;
            font-size: 0.8rem;
            margin-top: 0.25rem;
            display: none;
        }
        .password-strength {
            height: 5px;
            border-radius: 3px;
            transition: all 0.3s;
            margin-top: 0.5rem;
        }
    </style>
</head>
<body class="flex justify-center items-center h-screen text-white relative">
    <!-- Animated Background Text -->
    <div class="absolute inset-0 flex justify-center items-center">
        <h1 class="animate-glitch">ショップ</h1>
    </div>

    <!-- New Password Form -->
    <div class="bg-gray-900 bg-opacity-70 p-8 rounded-2xl shadow-lg w-96 text-center relative">
        <h2 class="text-3xl font-bold text-[#00ffff] mb-6">Reset Password</h2>
        
        <form id="resetPasswordForm" class="space-y-4">
            <input type="hidden" id="token" name="token" value="<%= token %>">
            
            <div class="text-left">
                <label class="text-gray-400 text-sm block mb-1">Enter OTP Code</label>
                <div class="otp-container flex justify-between">
                    <input type="text" class="otp-input w-10 p-2 rounded bg-gray-800 text-[#00ffff] text-center" maxlength="1" data-index="1">
                    <input type="text" class="otp-input w-10 p-2 rounded bg-gray-800 text-[#00ffff] text-center" maxlength="1" data-index="2">
                    <input type="text" class="otp-input w-10 p-2 rounded bg-gray-800 text-[#00ffff] text-center" maxlength="1" data-index="3">
                    <input type="text" class="otp-input w-10 p-2 rounded bg-gray-800 text-[#00ffff] text-center" maxlength="1" data-index="4">
                    <input type="text" class="otp-input w-10 p-2 rounded bg-gray-800 text-[#00ffff] text-center" maxlength="1" data-index="5">
                    <input type="text" class="otp-input w-10 p-2 rounded bg-gray-800 text-[#00ffff] text-center" maxlength="1" data-index="6">
                </div>
            </div>

            <div class="text-left">
                <label for="newPassword" class="text-gray-400 text-sm block mb-1">New Password</label>
                <div class="relative">
                    <input 
                        type="password" 
                        id="newPassword" 
                        name="password" 
                        class="w-full p-3 pr-12 rounded-xl bg-gray-800 text-[#00ffff] placeholder-gray-400 focus:ring-2 focus:ring-[#00ffff]"
                    >
                    <span class="toggle-password absolute right-3 top-1/2 transform -translate-y-1/2 text-[#00ffff] cursor-pointer" data-target="newPassword">
                        <i class="fa fa-eye"></i>
                    </span>
                </div>
                <div class="validation-box mt-2 text-xs text-gray-400">
                    <div class="validation-item" data-requirement="length">
                        <i class="validation-icon fa fa-times"></i> At least 8 characters
                    </div>
                    <div class="validation-item" data-requirement="uppercase">
                        <i class="validation-icon fa fa-times"></i> One uppercase letter
                    </div>
                    <div class="validation-item" data-requirement="lowercase">
                        <i class="validation-icon fa fa-times"></i> One lowercase letter
                    </div>
                    <div class="validation-item" data-requirement="number">
                        <i class="validation-icon fa fa-times"></i> One number
                    </div>
                    <div class="validation-item" data-requirement="special">
                        <i class="validation-icon fa fa-times"></i> One special character
                    </div>
                </div>
            </div>

            <div class="text-left">
                <label for="confirmPassword" class="text-gray-400 text-sm block mb-1">Confirm Password</label>
                <div class="relative">
                    <input 
                        type="password" 
                        id="confirmPassword" 
                        name="confirmPassword" 
                        class="w-full p-3 pr-12 rounded-xl bg-gray-800 text-[#00ffff] placeholder-gray-400 focus:ring-2 focus:ring-[#00ffff]"
                    >
                    <span class="toggle-password absolute right-3 top-1/2 transform -translate-y-1/2 text-[#00ffff] cursor-pointer" data-target="confirmPassword">
                        <i class="fa fa-eye"></i>
                    </span>
                </div>
                <div class="validation-box mt-2 text-xs text-gray-400">
                    <div class="validation-item" data-requirement="match">
                        <i class="validation-icon fa fa-times"></i> Passwords match
                    </div>
                </div>
            </div>

            <button 
                type="submit" 
                id="submitBtn"
                class="w-full p-3 bg-[#00ffff] rounded-xl font-bold text-black hover:bg-[#0088ff] transition relative overflow-hidden"
            >
                Reset Password
            </button>
        </form>
    </div>

    <!-- Decorative Elements -->
    <div class="fixed bottom-4 left-4 text-[#00ffff] opacity-30 text-xs">
        SYSTEM.RECOVERY.MODULE.v2.5
    </div>

    <!-- Font Awesome CSS CDN -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" integrity="sha512-SfTiTlX6kk+qitfevl/7LibUOeJWlt9rbyDn92a1DqWOw9vWG2MFoays0sgObmWazO5BQPiFucnnEAjpAB+/Sw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <!-- SweetAlert2 CDN -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        .toggle-password {
            z-index: 10; /* Ensure it appears above other elements */
        }
        .toggle-password i {
            font-size: 1rem; /* Adjust size as needed */
        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // OTP input handling
            const otpInputs = document.querySelectorAll('.otp-input');
            otpInputs.forEach((input, index) => {
                input.addEventListener('input', (e) => {
                    if (e.target.value.length === 1 && index < otpInputs.length - 1) {
                        otpInputs[index + 1].focus();
                    }
                });
                input.addEventListener('keydown', (e) => {
                    if (e.key === 'Backspace' && !input.value && index > 0) {
                        otpInputs[index - 1].focus();
                    }
                });
            });

            // Password visibility toggle
            document.querySelectorAll('.toggle-password').forEach(toggle => {
                toggle.addEventListener('click', () => {
                    const targetId = toggle.getAttribute('data-target');
                    const input = document.getElementById(targetId);
                    const icon = toggle.querySelector('i');
                    
                    if (input.type === 'password') {
                        input.type = 'text';
                        icon.classList.remove('fa-eye');
                        icon.classList.add('fa-eye-slash');
                    } else {
                        input.type = 'password';
                        icon.classList.remove('fa-eye-slash');
                        icon.classList.add('fa-eye');
                    }
                });
            });

            // Password validation
            const newPassword = document.getElementById('newPassword');
            const confirmPassword = document.getElementById('confirmPassword');

            function validatePassword() {
                const password = newPassword.value;
                const validations = {
                    length: password.length >= 8,
                    uppercase: /[A-Z]/.test(password),
                    lowercase: /[a-z]/.test(password),
                    number: /[0-9]/.test(password),
                    special: /[^A-Za-z0-9]/.test(password),
                    match: password === confirmPassword.value && password !== ''
                };

                Object.entries(validations).forEach(([requirement, isValid]) => {
                    const item = document.querySelector(`[data-requirement="${requirement}"] .validation-icon`);
                    if (item) {
                        item.className = `validation-icon fa ${isValid ? 'fa-check text-green-500' : 'fa-times text-red-500'}`;
                    }
                });

                return Object.values(validations).every(v => v);
            }

            newPassword.addEventListener('input', validatePassword);
            confirmPassword.addEventListener('input', validatePassword);

            // Form submission
            document.getElementById('resetPasswordForm').addEventListener('submit', async (e) => {
                e.preventDefault();

                const token = document.getElementById('token').value;
                const otp = Array.from(otpInputs).map(input => input.value).join('');
                const password = newPassword.value;
                const submitBtn = document.getElementById('submitBtn');

                if (otp.length !== 6) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Please enter a complete 6-digit OTP',
                        background: '#1f2937',
                        color: '#fff'
                    });
                    return;
                }

                if (!validatePassword()) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Please meet all password requirements',
                        background: '#1f2937',
                        color: '#fff'
                    });
                    return;
                }

                submitBtn.disabled = true;
                submitBtn.innerHTML = 'Processing...';

                try {
                    const response = await fetch('/newPassword', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ token, otp, password })
                    });

                    const data = await response.json();
                    if (data.success) {
                        await Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: 'Password reset successfully!',
                            confirmButtonColor: '#00ffff',
                            background: '#1f2937',
                            color: '#fff'
                        });
                        window.location.href = '/login';
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.message,
                            background: '#1f2937',
                            color: '#fff'
                        });
                        submitBtn.disabled = false;
                        submitBtn.innerHTML = 'Reset Password';
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Network error, please try again.',
                        background: '#1f2937',
                        color: '#fff'
                    });
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = 'Reset Password';
                }
            });
        });
    </script>
</body>
</html>