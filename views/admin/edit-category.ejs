<%- include("../../views/admin/partials/header", { activePage: 'edit-category' }) %>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6 mt-60">
            <% if (typeof error !== 'undefined') { %>
            <div class="alert alert-danger"><%= error %></div>
            <% } %>
            <form id="editCategoryForm" method="post" action="/admin/editCategory/<%=category._id%>" onsubmit="return handleFormSubmit(event)">
                <div class="d-grid text-end mt-30 col-md-5">
                    <button class="btn btn-primary" type="submit">Update Category</button>
                </div>
                <div class="mb-4 mt-30">
                    <label for="category_name" class="form-label">Name <span class="text-danger">*</span></label>
                    <input type="text" name="categoryName" value="<%=category.name%>" class="form-control border" id="category_name" novalidate required oninput="validateField('name')"/>
                    <div id="name-error" class="error-message text-danger mt-1"></div>
                </div>
                
                <div class="mb-4">
                    <label for="descriptionId" class="form-label">Description <span class="text-danger">*</span></label>
                    <textarea name="description" class="form-control border" id="descriptionId" novalidate required oninput="validateField('description')"><%=category.description%></textarea>
                    <div id="description-error" class="error-message text-danger mt-1"></div>
                </div>
            </form>
        </div>
    </div>
</div>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>

<script>
async function handleFormSubmit(event) {
    event.preventDefault();
    if (!await validateForm()) {
        return false;
    }
    
    const form = document.getElementById('editCategoryForm');
    const formData = new FormData(form);
    const data = Object.fromEntries(formData);

    fetch(form.action, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(err => {
                throw new Error(err.error || 'Failed to update category');
            });
        }
        return response.json();
    })
    .then(result => {
        Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: result.message || 'Category updated successfully',
            showConfirmButton: false,
            timer: 1500
        }).then(() => {
            window.location.href = '/admin/category';
        });
    })
    .catch(error => {
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: error.message || 'Something went wrong while updating the category',
        });
    });
}

function validateField(field) {
    clearErrorMessages();
    if (field === 'name') {
        const name = document.getElementsByName("categoryName")[0].value.trim();
        if (name === "") {
            displayErrorMessage("name-error", "Please enter a category name");
        } else if (!/^[a-zA-Z\s]+$/.test(name)) {
            displayErrorMessage("name-error", "Category name should contain only alphabetic characters and spaces");
        } else if (name.length < 2 || name.length > 50) {
            displayErrorMessage("name-error", "Category name must be between 2 and 50 characters");
        }
    } else if (field === 'description') {
        const description = document.getElementById("descriptionId").value.trim();
        if (description === "") {
            displayErrorMessage("description-error", "Please enter a description");
        } else if (!/^[a-zA-Z0-9\s.,-]+$/.test(description)) {
            displayErrorMessage("description-error", "Description should not contain special characters (allowed: letters, numbers, spaces, commas, periods, hyphens)");
        } else if (description.length < 10 || description.length > 500) {
            displayErrorMessage("description-error", "Description must be between 10 and 500 characters");
        }
    }
}

async function validateForm() {
    clearErrorMessages();
    const name = document.getElementsByName("categoryName")[0].value.trim();
    const description = document.getElementById("descriptionId").value.trim();
    const originalCategoryId = '<%= category._id %>';
    let isValid = true;

    // Name Validation
    if (name === "") {
        displayErrorMessage("name-error", "Please enter a category name");
        isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(name)) {
        displayErrorMessage("name-error", "Category name should contain only alphabetic characters and spaces");
        isValid = false;
    } else if (name.length < 2 || name.length > 50) {
        displayErrorMessage("name-error", "Category name must be between 2 and 50 characters");
        isValid = false;
    }

    // Description Validation
    if (description === "") {
        displayErrorMessage("description-error", "Please enter a description");
        isValid = false;
    } else if (!/^[a-zA-Z0-9\s.,-]+$/.test(description)) {
        displayErrorMessage("description-error", "Description should not contain special characters (allowed: letters, numbers, spaces, commas, periods, hyphens)");
        isValid = false;
    } else if (description.length < 10 || description.length > 500) {
        displayErrorMessage("description-error", "Description must be between 10 and 500 characters");
        isValid = false;
    }

    return isValid;
}

function displayErrorMessage(elementId, message) {
    var errorElement = document.getElementById(elementId);
    errorElement.innerText = message;
    errorElement.style.display = "block";
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName("error-message");
    Array.from(errorElements).forEach((element) => {
        element.innerText = "";
        element.style.display = "none";
    });
}

window.onload = function() {
    if (typeof Swal !== 'undefined') {
        console.log("SweetAlert2 is loaded successfully");
    } else {
        console.error("SweetAlert2 failed to load");
    }
};
</script>

<%- include("../../views/admin/partials/footer", { activePage: 'edit-category' }) %>